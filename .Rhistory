labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(reshape)
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
graph
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
plot(components_datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
datos <- datos[-length(datos$Fecha),]
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
plot(components_datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 6, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
HWplot3<-function(ts_object,  n.ahead=4,  CI=.9,  error.ribbon='red', line.size=1){
hw_object<-HoltWinters(ts_object)
forecast<-predict(hw_object,  n.ahead=n.ahead,  prediction.interval=T,  level=CI)
for_values<-data.frame(time=round(time(forecast),  3),  value_forecast=as.data.frame(forecast)$fit,  dev=as.data.frame(forecast)$upr-as.data.frame(forecast)$fit)
fitted_values<-data.frame(time=round(time(hw_object$fitted),  3),  value_fitted=as.data.frame(hw_object$fitted)$xhat)
actual_values<-data.frame(time=round(time(hw_object$x),  3),  Actual=c(hw_object$x))
graphset<-merge(actual_values,  fitted_values,  by='time',  all=TRUE)
graphset<-merge(graphset,  for_values,  all=TRUE,  by='time')
graphset[is.na(graphset$dev),  ]$dev<-0
graphset$Fitted<-c(rep(NA,  NROW(graphset)-(NROW(for_values) + NROW(fitted_values))),  fitted_values$value_fitted,  for_values$value_forecast)
graphset.melt<-melt(graphset[, c('time', 'Actual', 'Fitted')], id='time')
p<-ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill=error.ribbon) + geom_line(aes(colour=variable), size=line.size) + geom_vline(xintercept=max(actual_values$time),  lty=2) + xlab('Time') + ylab('Value') + labs(legend.position='bottom') + scale_colour_hue('')
return(p)
}
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
graph
graph <- HWplot3 (datosts, n.ahead = 6) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
graph
#Limpiar entorno
rm(list = ls())
#Installar paquetes
if(!require(pacman)) install.packages("pacman");require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
caret) # Classification And REgression Training
## load data
df <- import("https://gitlab.com/Lectures-R/bd-meca-2022-summer/lecture-01/-/raw/main/data/GEIH_sample1.Rds")
db <- as_tibble(df) ## from dataframe to tibble
## print data
head(db)
tail(db)
###Esta es la función crack del día
## summary db
skim(db) %>% head()
skim(db)
###Esta es la función crack del día
## summary db
skim(db) %>% head()
R.version()
R.Version()
#Gráfico (muy útil ver lo de data to viz)
ggplot(data = db , mapping = aes(x = age , y = y_ingLab_m , group=as.factor(formal) , color=as.factor(formal))) +
geom_point()
#Para tener un subset
ggplot(data = db%>%subset(is.na(formal) == FALSE) , mapping = aes(x = age , y = y_ingLab_m , group=as.factor(formal) , color=as.factor(formal))) +
geom_point()
## density: income by sex
p <- ggplot(data=db) +
geom_histogram(mapping = aes(x=y_ingLab_m , group=as.factor(sex) , fill=as.factor(sex)))
p
p + scale_fill_manual(values = c("0"="red" , "1"="blue") , label = c("0"="Hombre" , "1"="Mujer") , name = "Sexo")
box_plot
#Para meter temas predefinidos
box_plot <- ggplot(data=db , mapping = aes(as.factor(estrato1) , totalHoursWorked)) +
geom_boxplot()
box_plot
box_plot
## add another geometry
box_plot <- box_plot +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") , label = c("0"="Hombre" , "1"="Mujer") , name = "Sexo")
box_plot
## add theme
box_plot + theme_test()
####Transformaciones####
h_hour = ggplot() + geom_histogram(data=db , aes(x=hoursWorkUsual) , fill="#99FF33" , alpha=0.5)
h_hour
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
#Reescalar la variable
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
h_hour + geom_histogram(data=db , aes(x=esc_hoursWorkUsual) , fill="#FF0066" , alpha=0.5)
####Transformaciones####
h_hour = ggplot() + geom_histogram(data=db , aes(x=hoursWorkUsual) , fill="#99FF33" , alpha=0.8)
h_hour
#Reescalar la variable
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
h_hour + geom_histogram(data=db , aes(x=esc_hoursWorkUsual) , fill="#FF0066" , alpha=0.5)
#trasnformación boxcox
BoxCoxTrans(db$y_ingLab_m , na.rm=T)
?BoxCoxTrans
db = db %>%
group_by(directorio) %>%
mutate(mean_y_total_m = mean(y_total_m,na.rm=T))
head(db)
db_2 = db %>%
group_by(directorio) %>%
summarise(mean_y_total_m = mean(y_total_m,na.rm=T))
head(db_2)
# 1. importar librarias y set environment/wd
# llamar la librería pacman: contiene la función p_load()
rm(list=ls())
getwd()
#Directorio de Daniel
setwd("C:/Users/danie/OneDrive/Escritorio/Uniandes/PEG/Big Data and Machine Learning/BD-ML---PS1")
set.seed(1000)
require(pacman)
p_load(tidyverse, # contiene las librerías ggplot, dplyr...
rvest, data.table, dplyr, skimr, # summary data
caret, rio, vtable, stargazer, ggplot2, boot, MLmetrics, lfe) # web-scraping
# read_csv(file):  cargar database
df <- read.csv("dataoriginal.csv")
df2 <- read.csv("datafiltrada.csv")
eta.fn_1<-function(data,index){
coef(lm(y_ingLab_m~age+age2, data = df2, weights = fex_c, subset = index))
}
# boot(data, eta_func, R=N)
boot1 <- boot(df2, eta.fn_1, R = 1000)
output_boot1 <- t(rbind(boot1$t0, apply(boot1$t, 2, function(x) sd(x))))
eta.fn_11<-function(data,index){
f<-lm(y_ingLab_m~age+age2, data = df2, weights = fex_c, subset = index)
coefs_11 <- f$coefficients
b2<-coefs_11[2]
b3<-coefs_11[3]
age_peak_nolog<- -b2/(2*b3)
return(age_peak_nolog)
}
# boot(data, eta_func, R=N)
boot11 <- boot(df2, eta.fn_11, R = 1000)
output_boot11 <- t(rbind(boot11$t0, apply(boot11$t, 2, function(x) sd(x))))
alpha <- 0.05
age_peak_min_nolog <- output_boot11[1,1]-qnorm(1-(alpha/2))*output_boot11[1,2]
age_peak_max_nolog <- output_boot11[1,1]+qnorm(1-(alpha/2))*output_boot11[1,2]
output_boot1
b1_1_max <- boot1$t0[1]+qnorm(1-(alpha/2))*output_boot1[1,2]
b2_1_max <- boot1$t0[2]+qnorm(1-(alpha/2))*output_boot1[2,2]
b3_1_max <- boot1$t0[3]+qnorm(1-(alpha/2))*output_boot1[3,2]
b1_1 <- boot1$t0[1]
b2_1 <- boot1$t0[2]
b3_1 <- boot1$t0[3]
#Betas mínimos
b1_1_min <- boot1$t0[1]-qnorm(1-(alpha/2))*output_boot1[1,2]
b2_1_min <- boot1$t0[2]-qnorm(1-(alpha/2))*output_boot1[2,2]
b3_1_min <- boot1$t0[3]-qnorm(1-(alpha/2))*output_boot1[3,2]
df2 <- df2%>%mutate(inglabo_hat_nolog = b1_1+b2_1*age+b3_1*age2)
df2 <- df2%>%mutate(inglabo_hat_nolog_max = b1_1_max+b2_1_max*age+b3_1_max*age2)
df2 <- df2%>%mutate(inglabo_hat_nolog_min = b1_1_min+b2_1_min*age+b3_1_min*age2)
ggplot(df2)+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_max/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_min/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("Ingreso laboral estimado en miles")+
theme_classic()+
ylim(200,2500)+
geom_vline(xintercept = age_peak_min_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot11[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=48, label="\nEdad pico=48.5 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=45.8, label="\nRango minimo=48.5", y=1000), colour="red", angle=90)+
geom_text(aes(x=51.2, label="\nRango máximo=51.2", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
ggplot(df2)+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("Ingreso laboral estimado en miles")+
theme_classic()+
ylim(200,2500)+
geom_vline(xintercept = age_peak_min_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot11[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=48, label="\nEdad pico=48.5 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=45.8, label="\nRango minimo=48.5", y=1000), colour="red", angle=90)+
geom_text(aes(x=51.2, label="\nRango máximo=51.2", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
ggplot(df2)+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_max/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("Ingreso laboral estimado en miles")+
theme_classic()+
ylim(200,2500)+
geom_vline(xintercept = age_peak_min_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot11[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=48, label="\nEdad pico=48.5 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=45.8, label="\nRango minimo=48.5", y=1000), colour="red", angle=90)+
geom_text(aes(x=51.2, label="\nRango máximo=51.2", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
ggplot(df2)+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_max/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot11[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=48, label="\nEdad pico=48.5 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=45.8, label="\nRango minimo=48.5", y=1000), colour="red", angle=90)+
geom_text(aes(x=51.2, label="\nRango máximo=51.2", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
ggplot(df2)+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_max/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_min/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot11[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=48, label="\nEdad pico=48.5 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=45.8, label="\nRango minimo=48.5", y=1000), colour="red", angle=90)+
geom_text(aes(x=51.2, label="\nRango máximo=51.2", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
ggplot(df2)+
geom_point(mapping = aes(x = age, y = y_ingLab_m/1000))
ggplot(df2)+
geom_point(mapping = aes(x = age, y = y_ingLab_m/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_max/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_min/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot11[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=48, label="\nEdad pico=48.5 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=45.8, label="\nRango minimo=48.5", y=1000), colour="red", angle=90)+
geom_text(aes(x=51.2, label="\nRango máximo=51.2", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
ggplot(df2)+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_max/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog_min/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot11[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=48, label="\nEdad pico=48.5 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=45.8, label="\nRango minimo=48.5", y=1000), colour="red", angle=90)+
geom_text(aes(x=51.2, label="\nRango máximo=51.2", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
#Sin intervalos de los betas
ggplot(df2)+
geom_line(mapping = aes(x = age, y = inglabo_hat_nolog/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_nolog, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot11[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=48, label="\nEdad pico=48.5 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=45.8, label="\nRango minimo=48.5", y=1000), colour="red", angle=90)+
geom_text(aes(x=51.2, label="\nRango máximo=51.2", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
eta.fn_2<-function(data,index){
coef(lm(log(y_ingLab_m)~age+age2, data = df2, weights = fex_c, subset = index))
}
boot2 <- boot(df2, eta.fn_2, R = 1000)
output_boot2 <- t(rbind(boot2$t0, apply(boot2$t, 2, function(x) sd(x))))
eta.fn_22<-function(data,index){
f<-lm(log(y_ingLab_m)~age+age2, data = df2, weights = fex_c, subset = index)
coefs_22 <- f$coefficients
b2<-coefs_22[2]
b3<-coefs_22[3]
age_peak_log<- -b2/(2*b3)
return(age_peak_log)
}
# boot(data, eta_func, R=N)
boot22 <- boot(df2, eta.fn_22, R = 1000)
output_boot22 <- t(rbind(boot22$t0, apply(boot22$t, 2, function(x) sd(x))))
alpha <- 0.05
age_peak_min_log<- output_boot22[1,1]-qnorm(1-(alpha/2))*output_boot22[1,2]
age_peak_max_log <- output_boot22[1,1]+qnorm(1-(alpha/2))*output_boot22[1,2]
#Guardar los betas
b1_2 <- boot2$t0[1]
b2_2 <- boot2$t0[2]
b3_2 <- boot2$t0[3]
#Betas máximos
b1_2_max <- boot2$t0[1]+qnorm(1-(alpha/2))*output_boot2[1,2]
b2_2_max <- boot2$t0[2]+qnorm(1-(alpha/2))*output_boot2[2,2]
b3_2_max <- boot2$t0[3]+qnorm(1-(alpha/2))*output_boot2[3,2]
#Betas mínimos
b1_2_min <- boot2$t0[1]-qnorm(1-(alpha/2))*output_boot2[1,2]
b2_2_min <- boot2$t0[2]-qnorm(1-(alpha/2))*output_boot2[2,2]
b3_2_min <- boot2$t0[3]-qnorm(1-(alpha/2))*output_boot2[3,2]
df2 <- df2%>%mutate(inglabo_hat_log = b1_2+b2_2*age+b3_2*age2)
df2 <- df2%>%mutate(inglabo_hat_log_max = b1_2_max+b2_2_max*age+b3_2_max*age2)
df2 <- df2%>%mutate(inglabo_hat_log_min = b1_2_min+b2_2_min*age+b3_2_min*age2)
boot2$t0[1]
output_boot2[1,2]
output_boot2
qnorm(1-(alpha/2))
qnorm(1-(alpha/2))*output_boot2[1,2]
boot2$t0[1]-qnorm(1-(alpha/2))*output_boot2[1,2]
b1_2_min
output_boot22[1,1]
#Con intervalos de los betas
ggplot(df2)+
geom_line(mapping = aes(x = age, y = inglabo_hat_log_max/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_log_min/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_log/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("logaritmos Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot22[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=43.1, label="\nEdad pico=43.1 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=42.3, label="\nRango minimo=42.3", y=1000), colour="red", angle=90)+
geom_text(aes(x=43.9, label="\nRango máximo=43.9", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
df2 <- df2%>%mutate(inglabo_hat_log = exp(b1_2+b2_2*age+b3_2*age2))
df2 <- df2%>%mutate(inglabo_hat_log_max = exp(b1_2_max+b2_2_max*age+b3_2_max*age2))
df2 <- df2%>%mutate(inglabo_hat_log_min = exp(b1_2_min+b2_2_min*age+b3_2_min*age2))
#Con intervalos de los betas
ggplot(df2)+
geom_line(mapping = aes(x = age, y = inglabo_hat_log_max/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_log_min/1000))+
geom_line(mapping = aes(x = age, y = inglabo_hat_log/1000))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("logaritmos Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot22[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=43.1, label="\nEdad pico=43.1 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=42.3, label="\nRango minimo=42.3", y=1000), colour="red", angle=90)+
geom_text(aes(x=43.9, label="\nRango máximo=43.9", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
#Con intervalos de los betas
ggplot(df2)+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log_max)))+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log_min)))+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log)))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("logaritmos Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot22[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=43.1, label="\nEdad pico=43.1 ", y=1000), colour="blue", angle=90)+
geom_text(aes(x=42.3, label="\nRango minimo=42.3", y=1000), colour="red", angle=90)+
geom_text(aes(x=43.9, label="\nRango máximo=43.9", y=1000), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
#Con intervalos de los betas
ggplot(df2)+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log_max)))+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log_min)))+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log)))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("logaritmos Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot22[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=43.1, label="\nEdad pico=43.1 ", y=10), colour="blue", angle=90)+
geom_text(aes(x=42.3, label="\nRango minimo=42.3", y=10), colour="red", angle=90)+
geom_text(aes(x=43.9, label="\nRango máximo=43.9", y=10), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
#Con intervalos de los betas
ggplot(df2)+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log_max)))+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log_min)))+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log)))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("logaritmos Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot22[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=43.1, label="\nEdad pico=43.1 ", y=15), colour="blue", angle=90)+
geom_text(aes(x=42.3, label="\nRango minimo=42.3", y=15), colour="red", angle=90)+
geom_text(aes(x=43.9, label="\nRango máximo=43.9", y=15), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
#Con intervalos de los betas
ggplot(df2)+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log_max)))+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log_min)))+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log)))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("logaritmos Ingreso laboral estimado en miles")+
theme_classic()+
geom_vline(xintercept = age_peak_min_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot22[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=43.1, label="\nEdad pico=43.1 ", y=12), colour="blue", angle=90)+
geom_text(aes(x=42.3, label="\nRango minimo=42.3", y=12), colour="red", angle=90)+
geom_text(aes(x=43.9, label="\nRango máximo=43.9", y=12), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
#Sin intervalos de los betas
ggplot(df2)+
geom_line(mapping = aes(x = age, y = log(inglabo_hat_log)))+
ggtitle("Perfil ingreso laboral y edad")+
xlab("Edad")+
ylab("logaritmo del Ingreso laboral estimado")+
theme_classic()+
geom_vline(xintercept = age_peak_min_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = age_peak_max_log, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = output_boot22[1,1], linetype="dotted", color = "blue", size=1)+
geom_text(aes(x=43.1, label="\nEdad pico=43.1 ", y=12), colour="blue", angle=90)+
geom_text(aes(x=42.3, label="\nRango minimo=42.3", y=12), colour="red", angle=90)+
geom_text(aes(x=43.9, label="\nRango máximo=43.9", y=12), colour="red", angle=90)+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )
#Probemos variables
is.na(df2$impa)%>%table()
table(df2$cclasnr2)
is.na(df2$impaes)%>%table()
table(df2$clase)
y__ing_Labm
# bootstrap para p3m7
eta.fn_p3m7<-function(data,index){
coef(lm(log(y_ingLab_m) ~ female*age+female*age2, data = df2, weights = fex_c, subset = index))
}
# boot(data, eta_func, R=N)
bootp3m7 <- boot(df2, eta.fn_p3m7, R = 1000)
# inglaboFem_hat_m: funcion prediccion de inglaboFem
df2 <- df2%>%mutate(inglaboFem_hat_m = exp(bootp3m7$t0[1]+bootp3m7$t0[2]*female+bootp3m7$t0[3]*age+bootp3m7$t0[4]*age2+bootp3m7$t0[5]*female*age+bootp3m7$t0[6]*female*age2))
# gráfico solo con valores predichos g5
ggplot(df2, aes(x = age, y = log(inglaboFem_hat_m), group=as.factor(female), color=as.factor(female))  ) +
geom_point()+
ggtitle("Ingreso total según la edad, por sexo")+
xlab("Edad")+
labs(colour = "Sexo")+
ylab("Logaritmo del ingreso total")+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5, size = 20), axis.title.x = element_text(hjust = 0.5, size = 16), axis.title.y = element_text(hjust = 0.5, size = 16), axis.text = element_text(size = 14) )+
scale_colour_manual(values=c('0'='blue', '1'='red'), label= c('0'='Hombre', '1'='Mujer') )
